
SAMD20_I2C_SL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008fc  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000004  20000000  000008fc  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  20000004  00000900  00020004  2**2
                  ALLOC
  3 .stack        00002004  20000044  00000940  00020004  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000e9bf  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001b72  00000000  00000000  0002ea44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000228  00000000  00000000  000305b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000001c8  00000000  00000000  000307de  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  000110a0  00000000  00000000  000309a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000552a  00000000  00000000  00041a46  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0005fdef  00000000  00000000  00046f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000004a0  00000000  00000000  000a6d60  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000019c9  00000000  00000000  000a7200  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	48 20 00 20 09 06 00 00 05 06 00 00 05 06 00 00     H . ............
	...
  2c:	05 06 00 00 00 00 00 00 00 00 00 00 05 06 00 00     ................
  3c:	05 06 00 00 05 06 00 00 05 06 00 00 05 06 00 00     ................
  4c:	05 06 00 00 05 06 00 00 05 06 00 00 05 06 00 00     ................
  5c:	05 06 00 00 05 06 00 00 a1 06 00 00 05 06 00 00     ................
  6c:	05 06 00 00 05 06 00 00 05 06 00 00 05 06 00 00     ................
  7c:	05 06 00 00 05 06 00 00 05 06 00 00 05 06 00 00     ................
  8c:	05 06 00 00 05 06 00 00 05 06 00 00 05 06 00 00     ................
  9c:	05 06 00 00 05 06 00 00                             ........

000000a4 <__do_global_dtors_aux>:
  a4:	b510      	push	{r4, lr}
  a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
  a8:	7823      	ldrb	r3, [r4, #0]
  aa:	2b00      	cmp	r3, #0
  ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
  ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
  b0:	2b00      	cmp	r3, #0
  b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
  b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
  b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
  b8:	bf00      	nop
  ba:	2301      	movs	r3, #1
  bc:	7023      	strb	r3, [r4, #0]
  be:	bd10      	pop	{r4, pc}
  c0:	20000004 	.word	0x20000004
  c4:	00000000 	.word	0x00000000
  c8:	000008fc 	.word	0x000008fc

000000cc <frame_dummy>:
  cc:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
  ce:	b510      	push	{r4, lr}
  d0:	2b00      	cmp	r3, #0
  d2:	d003      	beq.n	dc <frame_dummy+0x10>
  d4:	4907      	ldr	r1, [pc, #28]	; (f4 <frame_dummy+0x28>)
  d6:	4808      	ldr	r0, [pc, #32]	; (f8 <frame_dummy+0x2c>)
  d8:	e000      	b.n	dc <frame_dummy+0x10>
  da:	bf00      	nop
  dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
  de:	6803      	ldr	r3, [r0, #0]
  e0:	2b00      	cmp	r3, #0
  e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
  e4:	bd10      	pop	{r4, pc}
  e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
  e8:	2b00      	cmp	r3, #0
  ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
  ec:	4798      	blx	r3
  ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
  f0:	00000000 	.word	0x00000000
  f4:	20000008 	.word	0x20000008
  f8:	000008fc 	.word	0x000008fc
  fc:	000008fc 	.word	0x000008fc
 100:	00000000 	.word	0x00000000

00000104 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
 104:	4b0c      	ldr	r3, [pc, #48]	; (138 <cpu_irq_enter_critical+0x34>)
 106:	681b      	ldr	r3, [r3, #0]
 108:	2b00      	cmp	r3, #0
 10a:	d106      	bne.n	11a <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 10c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
 110:	2b00      	cmp	r3, #0
 112:	d007      	beq.n	124 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
 114:	2200      	movs	r2, #0
 116:	4b09      	ldr	r3, [pc, #36]	; (13c <cpu_irq_enter_critical+0x38>)
 118:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
 11a:	4a07      	ldr	r2, [pc, #28]	; (138 <cpu_irq_enter_critical+0x34>)
 11c:	6813      	ldr	r3, [r2, #0]
 11e:	3301      	adds	r3, #1
 120:	6013      	str	r3, [r2, #0]
}
 122:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
 124:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
 126:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
 12a:	2200      	movs	r2, #0
 12c:	4b04      	ldr	r3, [pc, #16]	; (140 <cpu_irq_enter_critical+0x3c>)
 12e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
 130:	3201      	adds	r2, #1
 132:	4b02      	ldr	r3, [pc, #8]	; (13c <cpu_irq_enter_critical+0x38>)
 134:	701a      	strb	r2, [r3, #0]
 136:	e7f0      	b.n	11a <cpu_irq_enter_critical+0x16>
 138:	20000020 	.word	0x20000020
 13c:	20000024 	.word	0x20000024
 140:	20000000 	.word	0x20000000

00000144 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
 144:	4b08      	ldr	r3, [pc, #32]	; (168 <cpu_irq_leave_critical+0x24>)
 146:	681a      	ldr	r2, [r3, #0]
 148:	3a01      	subs	r2, #1
 14a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
 14c:	681b      	ldr	r3, [r3, #0]
 14e:	2b00      	cmp	r3, #0
 150:	d109      	bne.n	166 <cpu_irq_leave_critical+0x22>
 152:	4b06      	ldr	r3, [pc, #24]	; (16c <cpu_irq_leave_critical+0x28>)
 154:	781b      	ldrb	r3, [r3, #0]
 156:	2b00      	cmp	r3, #0
 158:	d005      	beq.n	166 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
 15a:	2201      	movs	r2, #1
 15c:	4b04      	ldr	r3, [pc, #16]	; (170 <cpu_irq_leave_critical+0x2c>)
 15e:	701a      	strb	r2, [r3, #0]
 160:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
 164:	b662      	cpsie	i
	}
}
 166:	4770      	bx	lr
 168:	20000020 	.word	0x20000020
 16c:	20000024 	.word	0x20000024
 170:	20000000 	.word	0x20000000

00000174 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
 174:	b5f0      	push	{r4, r5, r6, r7, lr}
 176:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
 178:	ac01      	add	r4, sp, #4
 17a:	2501      	movs	r5, #1
 17c:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
 17e:	2700      	movs	r7, #0
 180:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
 182:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
 184:	0021      	movs	r1, r4
 186:	200e      	movs	r0, #14
 188:	4e06      	ldr	r6, [pc, #24]	; (1a4 <system_board_init+0x30>)
 18a:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
 18c:	2280      	movs	r2, #128	; 0x80
 18e:	01d2      	lsls	r2, r2, #7
 190:	4b05      	ldr	r3, [pc, #20]	; (1a8 <system_board_init+0x34>)
 192:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
 194:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
 196:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
 198:	0021      	movs	r1, r4
 19a:	200f      	movs	r0, #15
 19c:	47b0      	blx	r6

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
	
#endif
}
 19e:	b003      	add	sp, #12
 1a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1a2:	46c0      	nop			; (mov r8, r8)
 1a4:	000001ad 	.word	0x000001ad
 1a8:	41004400 	.word	0x41004400

000001ac <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
 1ac:	b500      	push	{lr}
 1ae:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
 1b0:	ab01      	add	r3, sp, #4
 1b2:	2280      	movs	r2, #128	; 0x80
 1b4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
 1b6:	780a      	ldrb	r2, [r1, #0]
 1b8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
 1ba:	784a      	ldrb	r2, [r1, #1]
 1bc:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
 1be:	788a      	ldrb	r2, [r1, #2]
 1c0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
 1c2:	0019      	movs	r1, r3
 1c4:	4b01      	ldr	r3, [pc, #4]	; (1cc <port_pin_set_config+0x20>)
 1c6:	4798      	blx	r3
}
 1c8:	b003      	add	sp, #12
 1ca:	bd00      	pop	{pc}
 1cc:	000005a5 	.word	0x000005a5

000001d0 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
 1d0:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
 1d2:	490c      	ldr	r1, [pc, #48]	; (204 <system_clock_source_osc8m_set_config+0x34>)
 1d4:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
 1d6:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
 1d8:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
 1da:	7840      	ldrb	r0, [r0, #1]
 1dc:	2201      	movs	r2, #1
 1de:	4010      	ands	r0, r2
 1e0:	0180      	lsls	r0, r0, #6
 1e2:	2640      	movs	r6, #64	; 0x40
 1e4:	43b3      	bics	r3, r6
 1e6:	4303      	orrs	r3, r0
 1e8:	402a      	ands	r2, r5
 1ea:	01d2      	lsls	r2, r2, #7
 1ec:	2080      	movs	r0, #128	; 0x80
 1ee:	4383      	bics	r3, r0
 1f0:	4313      	orrs	r3, r2
 1f2:	2203      	movs	r2, #3
 1f4:	4022      	ands	r2, r4
 1f6:	0212      	lsls	r2, r2, #8
 1f8:	4803      	ldr	r0, [pc, #12]	; (208 <system_clock_source_osc8m_set_config+0x38>)
 1fa:	4003      	ands	r3, r0
 1fc:	4313      	orrs	r3, r2
 1fe:	620b      	str	r3, [r1, #32]
}
 200:	bd70      	pop	{r4, r5, r6, pc}
 202:	46c0      	nop			; (mov r8, r8)
 204:	40000800 	.word	0x40000800
 208:	fffffcff 	.word	0xfffffcff

0000020c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
 20c:	2807      	cmp	r0, #7
 20e:	d803      	bhi.n	218 <system_clock_source_enable+0xc>
 210:	0080      	lsls	r0, r0, #2
 212:	4b1e      	ldr	r3, [pc, #120]	; (28c <system_clock_source_enable+0x80>)
 214:	581b      	ldr	r3, [r3, r0]
 216:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
 218:	2017      	movs	r0, #23
 21a:	e036      	b.n	28a <system_clock_source_enable+0x7e>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
 21c:	4a1c      	ldr	r2, [pc, #112]	; (290 <system_clock_source_enable+0x84>)
 21e:	6a13      	ldr	r3, [r2, #32]
 220:	2102      	movs	r1, #2
 222:	430b      	orrs	r3, r1
 224:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
 226:	2000      	movs	r0, #0
 228:	e02f      	b.n	28a <system_clock_source_enable+0x7e>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
 22a:	4a19      	ldr	r2, [pc, #100]	; (290 <system_clock_source_enable+0x84>)
 22c:	6993      	ldr	r3, [r2, #24]
 22e:	2102      	movs	r1, #2
 230:	430b      	orrs	r3, r1
 232:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
 234:	2000      	movs	r0, #0
		break;
 236:	e028      	b.n	28a <system_clock_source_enable+0x7e>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
 238:	4a15      	ldr	r2, [pc, #84]	; (290 <system_clock_source_enable+0x84>)
 23a:	8a13      	ldrh	r3, [r2, #16]
 23c:	2102      	movs	r1, #2
 23e:	430b      	orrs	r3, r1
 240:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
 242:	2000      	movs	r0, #0
		break;
 244:	e021      	b.n	28a <system_clock_source_enable+0x7e>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
 246:	4a12      	ldr	r2, [pc, #72]	; (290 <system_clock_source_enable+0x84>)
 248:	8a93      	ldrh	r3, [r2, #20]
 24a:	2102      	movs	r1, #2
 24c:	430b      	orrs	r3, r1
 24e:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
 250:	2000      	movs	r0, #0
		break;
 252:	e01a      	b.n	28a <system_clock_source_enable+0x7e>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
 254:	4b0f      	ldr	r3, [pc, #60]	; (294 <system_clock_source_enable+0x88>)
 256:	681a      	ldr	r2, [r3, #0]
 258:	2102      	movs	r1, #2
 25a:	430a      	orrs	r2, r1
 25c:	601a      	str	r2, [r3, #0]
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
 25e:	681b      	ldr	r3, [r3, #0]
 260:	4a0d      	ldr	r2, [pc, #52]	; (298 <system_clock_source_enable+0x8c>)
 262:	4013      	ands	r3, r2
 264:	4a0a      	ldr	r2, [pc, #40]	; (290 <system_clock_source_enable+0x84>)
 266:	8493      	strh	r3, [r2, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
 268:	0011      	movs	r1, r2
 26a:	2210      	movs	r2, #16
 26c:	68cb      	ldr	r3, [r1, #12]
 26e:	421a      	tst	r2, r3
 270:	d0fc      	beq.n	26c <system_clock_source_enable+0x60>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
 272:	4a08      	ldr	r2, [pc, #32]	; (294 <system_clock_source_enable+0x88>)
 274:	6891      	ldr	r1, [r2, #8]
 276:	4b06      	ldr	r3, [pc, #24]	; (290 <system_clock_source_enable+0x84>)
 278:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
 27a:	6851      	ldr	r1, [r2, #4]
 27c:	6299      	str	r1, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
 27e:	6812      	ldr	r2, [r2, #0]
 280:	b292      	uxth	r2, r2
 282:	849a      	strh	r2, [r3, #36]	; 0x24
	return STATUS_OK;
 284:	2000      	movs	r0, #0
 286:	e000      	b.n	28a <system_clock_source_enable+0x7e>
		return STATUS_OK;
 288:	2000      	movs	r0, #0
}
 28a:	4770      	bx	lr
 28c:	000008bc 	.word	0x000008bc
 290:	40000800 	.word	0x40000800
 294:	20000028 	.word	0x20000028
 298:	0000ff7f 	.word	0x0000ff7f

0000029c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
 29c:	b530      	push	{r4, r5, lr}
 29e:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
 2a0:	22c2      	movs	r2, #194	; 0xc2
 2a2:	00d2      	lsls	r2, r2, #3
 2a4:	4b1a      	ldr	r3, [pc, #104]	; (310 <system_clock_init+0x74>)
 2a6:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
 2a8:	4a1a      	ldr	r2, [pc, #104]	; (314 <system_clock_init+0x78>)
 2aa:	6853      	ldr	r3, [r2, #4]
 2ac:	211e      	movs	r1, #30
 2ae:	438b      	bics	r3, r1
 2b0:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
 2b2:	2301      	movs	r3, #1
 2b4:	466a      	mov	r2, sp
 2b6:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
 2b8:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
 2ba:	4d17      	ldr	r5, [pc, #92]	; (318 <system_clock_init+0x7c>)
 2bc:	b2e0      	uxtb	r0, r4
 2be:	4669      	mov	r1, sp
 2c0:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
 2c2:	3401      	adds	r4, #1
 2c4:	2c1c      	cmp	r4, #28
 2c6:	d1f9      	bne.n	2bc <system_clock_init+0x20>
	config->run_in_standby  = false;
 2c8:	a803      	add	r0, sp, #12
 2ca:	2400      	movs	r4, #0
 2cc:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
 2ce:	2501      	movs	r5, #1
 2d0:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
 2d2:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
 2d4:	4b11      	ldr	r3, [pc, #68]	; (31c <system_clock_init+0x80>)
 2d6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
 2d8:	2006      	movs	r0, #6
 2da:	4b11      	ldr	r3, [pc, #68]	; (320 <system_clock_init+0x84>)
 2dc:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
 2de:	4b11      	ldr	r3, [pc, #68]	; (324 <system_clock_init+0x88>)
 2e0:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
 2e2:	4b11      	ldr	r3, [pc, #68]	; (328 <system_clock_init+0x8c>)
 2e4:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
 2e6:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
 2e8:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
 2ea:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
 2ec:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
 2ee:	466b      	mov	r3, sp
 2f0:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
 2f2:	2306      	movs	r3, #6
 2f4:	466a      	mov	r2, sp
 2f6:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
 2f8:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
 2fa:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
 2fc:	4669      	mov	r1, sp
 2fe:	2000      	movs	r0, #0
 300:	4b0a      	ldr	r3, [pc, #40]	; (32c <system_clock_init+0x90>)
 302:	4798      	blx	r3
 304:	2000      	movs	r0, #0
 306:	4b0a      	ldr	r3, [pc, #40]	; (330 <system_clock_init+0x94>)
 308:	4798      	blx	r3
#endif
}
 30a:	b005      	add	sp, #20
 30c:	bd30      	pop	{r4, r5, pc}
 30e:	46c0      	nop			; (mov r8, r8)
 310:	40000800 	.word	0x40000800
 314:	41004000 	.word	0x41004000
 318:	000004e1 	.word	0x000004e1
 31c:	000001d1 	.word	0x000001d1
 320:	0000020d 	.word	0x0000020d
 324:	00000335 	.word	0x00000335
 328:	40000400 	.word	0x40000400
 32c:	00000359 	.word	0x00000359
 330:	00000411 	.word	0x00000411

00000334 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
 334:	4a06      	ldr	r2, [pc, #24]	; (350 <system_gclk_init+0x1c>)
 336:	6993      	ldr	r3, [r2, #24]
 338:	2108      	movs	r1, #8
 33a:	430b      	orrs	r3, r1
 33c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
 33e:	2201      	movs	r2, #1
 340:	4b04      	ldr	r3, [pc, #16]	; (354 <system_gclk_init+0x20>)
 342:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
 344:	0019      	movs	r1, r3
 346:	780b      	ldrb	r3, [r1, #0]
 348:	4213      	tst	r3, r2
 34a:	d1fc      	bne.n	346 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
 34c:	4770      	bx	lr
 34e:	46c0      	nop			; (mov r8, r8)
 350:	40000400 	.word	0x40000400
 354:	40000c00 	.word	0x40000c00

00000358 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
 358:	b570      	push	{r4, r5, r6, lr}
 35a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
 35c:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
 35e:	780d      	ldrb	r5, [r1, #0]
 360:	022d      	lsls	r5, r5, #8
 362:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
 364:	784b      	ldrb	r3, [r1, #1]
 366:	2b00      	cmp	r3, #0
 368:	d002      	beq.n	370 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
 36a:	2380      	movs	r3, #128	; 0x80
 36c:	02db      	lsls	r3, r3, #11
 36e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
 370:	7a4b      	ldrb	r3, [r1, #9]
 372:	2b00      	cmp	r3, #0
 374:	d002      	beq.n	37c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
 376:	2380      	movs	r3, #128	; 0x80
 378:	031b      	lsls	r3, r3, #12
 37a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
 37c:	6848      	ldr	r0, [r1, #4]
 37e:	2801      	cmp	r0, #1
 380:	d910      	bls.n	3a4 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
 382:	1e43      	subs	r3, r0, #1
 384:	4218      	tst	r0, r3
 386:	d134      	bne.n	3f2 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
 388:	2802      	cmp	r0, #2
 38a:	d930      	bls.n	3ee <system_gclk_gen_set_config+0x96>
 38c:	2302      	movs	r3, #2
 38e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
 390:	3201      	adds	r2, #1
						mask <<= 1) {
 392:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
 394:	4298      	cmp	r0, r3
 396:	d8fb      	bhi.n	390 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
 398:	0212      	lsls	r2, r2, #8
 39a:	4332      	orrs	r2, r6
 39c:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
 39e:	2380      	movs	r3, #128	; 0x80
 3a0:	035b      	lsls	r3, r3, #13
 3a2:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
 3a4:	7a0b      	ldrb	r3, [r1, #8]
 3a6:	2b00      	cmp	r3, #0
 3a8:	d002      	beq.n	3b0 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
 3aa:	2380      	movs	r3, #128	; 0x80
 3ac:	039b      	lsls	r3, r3, #14
 3ae:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 3b0:	4a13      	ldr	r2, [pc, #76]	; (400 <system_gclk_gen_set_config+0xa8>)
 3b2:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
 3b4:	b25b      	sxtb	r3, r3
 3b6:	2b00      	cmp	r3, #0
 3b8:	dbfb      	blt.n	3b2 <system_gclk_gen_set_config+0x5a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
 3ba:	4b12      	ldr	r3, [pc, #72]	; (404 <system_gclk_gen_set_config+0xac>)
 3bc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
 3be:	4b12      	ldr	r3, [pc, #72]	; (408 <system_gclk_gen_set_config+0xb0>)
 3c0:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 3c2:	4a0f      	ldr	r2, [pc, #60]	; (400 <system_gclk_gen_set_config+0xa8>)
 3c4:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
 3c6:	b25b      	sxtb	r3, r3
 3c8:	2b00      	cmp	r3, #0
 3ca:	dbfb      	blt.n	3c4 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
 3cc:	4b0c      	ldr	r3, [pc, #48]	; (400 <system_gclk_gen_set_config+0xa8>)
 3ce:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 3d0:	001a      	movs	r2, r3
 3d2:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
 3d4:	b25b      	sxtb	r3, r3
 3d6:	2b00      	cmp	r3, #0
 3d8:	dbfb      	blt.n	3d2 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
 3da:	4a09      	ldr	r2, [pc, #36]	; (400 <system_gclk_gen_set_config+0xa8>)
 3dc:	6853      	ldr	r3, [r2, #4]
 3de:	2180      	movs	r1, #128	; 0x80
 3e0:	0249      	lsls	r1, r1, #9
 3e2:	400b      	ands	r3, r1
 3e4:	431d      	orrs	r5, r3
 3e6:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
 3e8:	4b08      	ldr	r3, [pc, #32]	; (40c <system_gclk_gen_set_config+0xb4>)
 3ea:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 3ec:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
 3ee:	2200      	movs	r2, #0
 3f0:	e7d2      	b.n	398 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
 3f2:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
 3f4:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
 3f6:	2380      	movs	r3, #128	; 0x80
 3f8:	029b      	lsls	r3, r3, #10
 3fa:	431d      	orrs	r5, r3
 3fc:	e7d2      	b.n	3a4 <system_gclk_gen_set_config+0x4c>
 3fe:	46c0      	nop			; (mov r8, r8)
 400:	40000c00 	.word	0x40000c00
 404:	00000105 	.word	0x00000105
 408:	40000c08 	.word	0x40000c08
 40c:	00000145 	.word	0x00000145

00000410 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
 410:	b510      	push	{r4, lr}
 412:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 414:	4a0b      	ldr	r2, [pc, #44]	; (444 <system_gclk_gen_enable+0x34>)
 416:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 418:	b25b      	sxtb	r3, r3
 41a:	2b00      	cmp	r3, #0
 41c:	dbfb      	blt.n	416 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
 41e:	4b0a      	ldr	r3, [pc, #40]	; (448 <system_gclk_gen_enable+0x38>)
 420:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
 422:	4b0a      	ldr	r3, [pc, #40]	; (44c <system_gclk_gen_enable+0x3c>)
 424:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 426:	4a07      	ldr	r2, [pc, #28]	; (444 <system_gclk_gen_enable+0x34>)
 428:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 42a:	b25b      	sxtb	r3, r3
 42c:	2b00      	cmp	r3, #0
 42e:	dbfb      	blt.n	428 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
 430:	4a04      	ldr	r2, [pc, #16]	; (444 <system_gclk_gen_enable+0x34>)
 432:	6851      	ldr	r1, [r2, #4]
 434:	2380      	movs	r3, #128	; 0x80
 436:	025b      	lsls	r3, r3, #9
 438:	430b      	orrs	r3, r1
 43a:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
 43c:	4b04      	ldr	r3, [pc, #16]	; (450 <system_gclk_gen_enable+0x40>)
 43e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 440:	bd10      	pop	{r4, pc}
 442:	46c0      	nop			; (mov r8, r8)
 444:	40000c00 	.word	0x40000c00
 448:	00000105 	.word	0x00000105
 44c:	40000c04 	.word	0x40000c04
 450:	00000145 	.word	0x00000145

00000454 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
 454:	b510      	push	{r4, lr}
 456:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
 458:	4b06      	ldr	r3, [pc, #24]	; (474 <system_gclk_chan_enable+0x20>)
 45a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
 45c:	4b06      	ldr	r3, [pc, #24]	; (478 <system_gclk_chan_enable+0x24>)
 45e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
 460:	4a06      	ldr	r2, [pc, #24]	; (47c <system_gclk_chan_enable+0x28>)
 462:	8853      	ldrh	r3, [r2, #2]
 464:	2180      	movs	r1, #128	; 0x80
 466:	01c9      	lsls	r1, r1, #7
 468:	430b      	orrs	r3, r1
 46a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
 46c:	4b04      	ldr	r3, [pc, #16]	; (480 <system_gclk_chan_enable+0x2c>)
 46e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 470:	bd10      	pop	{r4, pc}
 472:	46c0      	nop			; (mov r8, r8)
 474:	00000105 	.word	0x00000105
 478:	40000c02 	.word	0x40000c02
 47c:	40000c00 	.word	0x40000c00
 480:	00000145 	.word	0x00000145

00000484 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
 484:	b510      	push	{r4, lr}
 486:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
 488:	4b0f      	ldr	r3, [pc, #60]	; (4c8 <system_gclk_chan_disable+0x44>)
 48a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
 48c:	4b0f      	ldr	r3, [pc, #60]	; (4cc <system_gclk_chan_disable+0x48>)
 48e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
 490:	4a0f      	ldr	r2, [pc, #60]	; (4d0 <system_gclk_chan_disable+0x4c>)
 492:	8853      	ldrh	r3, [r2, #2]
 494:	051b      	lsls	r3, r3, #20
 496:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
 498:	8853      	ldrh	r3, [r2, #2]
 49a:	490e      	ldr	r1, [pc, #56]	; (4d4 <system_gclk_chan_disable+0x50>)
 49c:	400b      	ands	r3, r1
 49e:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
 4a0:	8853      	ldrh	r3, [r2, #2]
 4a2:	490d      	ldr	r1, [pc, #52]	; (4d8 <system_gclk_chan_disable+0x54>)
 4a4:	400b      	ands	r3, r1
 4a6:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
 4a8:	0011      	movs	r1, r2
 4aa:	2280      	movs	r2, #128	; 0x80
 4ac:	01d2      	lsls	r2, r2, #7
 4ae:	884b      	ldrh	r3, [r1, #2]
 4b0:	4213      	tst	r3, r2
 4b2:	d1fc      	bne.n	4ae <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
 4b4:	4906      	ldr	r1, [pc, #24]	; (4d0 <system_gclk_chan_disable+0x4c>)
 4b6:	884a      	ldrh	r2, [r1, #2]
 4b8:	0203      	lsls	r3, r0, #8
 4ba:	4806      	ldr	r0, [pc, #24]	; (4d4 <system_gclk_chan_disable+0x50>)
 4bc:	4002      	ands	r2, r0
 4be:	4313      	orrs	r3, r2
 4c0:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
 4c2:	4b06      	ldr	r3, [pc, #24]	; (4dc <system_gclk_chan_disable+0x58>)
 4c4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 4c6:	bd10      	pop	{r4, pc}
 4c8:	00000105 	.word	0x00000105
 4cc:	40000c02 	.word	0x40000c02
 4d0:	40000c00 	.word	0x40000c00
 4d4:	fffff0ff 	.word	0xfffff0ff
 4d8:	ffffbfff 	.word	0xffffbfff
 4dc:	00000145 	.word	0x00000145

000004e0 <system_gclk_chan_set_config>:
{
 4e0:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
 4e2:	780c      	ldrb	r4, [r1, #0]
 4e4:	0224      	lsls	r4, r4, #8
 4e6:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
 4e8:	4b02      	ldr	r3, [pc, #8]	; (4f4 <system_gclk_chan_set_config+0x14>)
 4ea:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
 4ec:	b2a4      	uxth	r4, r4
 4ee:	4b02      	ldr	r3, [pc, #8]	; (4f8 <system_gclk_chan_set_config+0x18>)
 4f0:	805c      	strh	r4, [r3, #2]
}
 4f2:	bd10      	pop	{r4, pc}
 4f4:	00000485 	.word	0x00000485
 4f8:	40000c00 	.word	0x40000c00

000004fc <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
 4fc:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
 4fe:	78d3      	ldrb	r3, [r2, #3]
 500:	2b00      	cmp	r3, #0
 502:	d135      	bne.n	570 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
 504:	7813      	ldrb	r3, [r2, #0]
 506:	2b80      	cmp	r3, #128	; 0x80
 508:	d029      	beq.n	55e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
 50a:	061b      	lsls	r3, r3, #24
 50c:	2480      	movs	r4, #128	; 0x80
 50e:	0264      	lsls	r4, r4, #9
 510:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
 512:	7854      	ldrb	r4, [r2, #1]
 514:	2502      	movs	r5, #2
 516:	43ac      	bics	r4, r5
 518:	d106      	bne.n	528 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
 51a:	7894      	ldrb	r4, [r2, #2]
 51c:	2c00      	cmp	r4, #0
 51e:	d120      	bne.n	562 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
 520:	2480      	movs	r4, #128	; 0x80
 522:	02a4      	lsls	r4, r4, #10
 524:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
 526:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
 528:	7854      	ldrb	r4, [r2, #1]
 52a:	3c01      	subs	r4, #1
 52c:	2c01      	cmp	r4, #1
 52e:	d91c      	bls.n	56a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
 530:	040d      	lsls	r5, r1, #16
 532:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
 534:	24a0      	movs	r4, #160	; 0xa0
 536:	05e4      	lsls	r4, r4, #23
 538:	432c      	orrs	r4, r5
 53a:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 53c:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
 53e:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
 540:	24d0      	movs	r4, #208	; 0xd0
 542:	0624      	lsls	r4, r4, #24
 544:	432c      	orrs	r4, r5
 546:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 548:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
 54a:	78d4      	ldrb	r4, [r2, #3]
 54c:	2c00      	cmp	r4, #0
 54e:	d122      	bne.n	596 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
 550:	035b      	lsls	r3, r3, #13
 552:	d51c      	bpl.n	58e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
 554:	7893      	ldrb	r3, [r2, #2]
 556:	2b01      	cmp	r3, #1
 558:	d01e      	beq.n	598 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
 55a:	6141      	str	r1, [r0, #20]
 55c:	e017      	b.n	58e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
 55e:	2300      	movs	r3, #0
 560:	e7d7      	b.n	512 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
 562:	24c0      	movs	r4, #192	; 0xc0
 564:	02e4      	lsls	r4, r4, #11
 566:	4323      	orrs	r3, r4
 568:	e7dd      	b.n	526 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
 56a:	4c0d      	ldr	r4, [pc, #52]	; (5a0 <_system_pinmux_config+0xa4>)
 56c:	4023      	ands	r3, r4
 56e:	e7df      	b.n	530 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
 570:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
 572:	040c      	lsls	r4, r1, #16
 574:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
 576:	23a0      	movs	r3, #160	; 0xa0
 578:	05db      	lsls	r3, r3, #23
 57a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 57c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
 57e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
 580:	23d0      	movs	r3, #208	; 0xd0
 582:	061b      	lsls	r3, r3, #24
 584:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 586:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
 588:	78d3      	ldrb	r3, [r2, #3]
 58a:	2b00      	cmp	r3, #0
 58c:	d103      	bne.n	596 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
 58e:	7853      	ldrb	r3, [r2, #1]
 590:	3b01      	subs	r3, #1
 592:	2b01      	cmp	r3, #1
 594:	d902      	bls.n	59c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
 596:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
 598:	6181      	str	r1, [r0, #24]
 59a:	e7f8      	b.n	58e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
 59c:	6081      	str	r1, [r0, #8]
}
 59e:	e7fa      	b.n	596 <_system_pinmux_config+0x9a>
 5a0:	fffbffff 	.word	0xfffbffff

000005a4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
 5a4:	b510      	push	{r4, lr}
 5a6:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
 5a8:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
 5aa:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
 5ac:	2900      	cmp	r1, #0
 5ae:	d104      	bne.n	5ba <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
 5b0:	0943      	lsrs	r3, r0, #5
 5b2:	01db      	lsls	r3, r3, #7
 5b4:	4905      	ldr	r1, [pc, #20]	; (5cc <system_pinmux_pin_set_config+0x28>)
 5b6:	468c      	mov	ip, r1
 5b8:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
 5ba:	241f      	movs	r4, #31
 5bc:	4020      	ands	r0, r4
 5be:	2101      	movs	r1, #1
 5c0:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
 5c2:	0018      	movs	r0, r3
 5c4:	4b02      	ldr	r3, [pc, #8]	; (5d0 <system_pinmux_pin_set_config+0x2c>)
 5c6:	4798      	blx	r3
}
 5c8:	bd10      	pop	{r4, pc}
 5ca:	46c0      	nop			; (mov r8, r8)
 5cc:	41004400 	.word	0x41004400
 5d0:	000004fd 	.word	0x000004fd

000005d4 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
 5d4:	4770      	bx	lr
	...

000005d8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
 5d8:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
 5da:	4b05      	ldr	r3, [pc, #20]	; (5f0 <system_init+0x18>)
 5dc:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
 5de:	4b05      	ldr	r3, [pc, #20]	; (5f4 <system_init+0x1c>)
 5e0:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
 5e2:	4b05      	ldr	r3, [pc, #20]	; (5f8 <system_init+0x20>)
 5e4:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
 5e6:	4b05      	ldr	r3, [pc, #20]	; (5fc <system_init+0x24>)
 5e8:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
 5ea:	4b05      	ldr	r3, [pc, #20]	; (600 <system_init+0x28>)
 5ec:	4798      	blx	r3
}
 5ee:	bd10      	pop	{r4, pc}
 5f0:	0000029d 	.word	0x0000029d
 5f4:	00000175 	.word	0x00000175
 5f8:	000005d5 	.word	0x000005d5
 5fc:	000005d5 	.word	0x000005d5
 600:	000005d5 	.word	0x000005d5

00000604 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 604:	e7fe      	b.n	604 <Dummy_Handler>
	...

00000608 <Reset_Handler>:
{
 608:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
 60a:	4a1a      	ldr	r2, [pc, #104]	; (674 <Reset_Handler+0x6c>)
 60c:	4b1a      	ldr	r3, [pc, #104]	; (678 <Reset_Handler+0x70>)
 60e:	429a      	cmp	r2, r3
 610:	d011      	beq.n	636 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
 612:	001a      	movs	r2, r3
 614:	4b19      	ldr	r3, [pc, #100]	; (67c <Reset_Handler+0x74>)
 616:	429a      	cmp	r2, r3
 618:	d20d      	bcs.n	636 <Reset_Handler+0x2e>
 61a:	4a19      	ldr	r2, [pc, #100]	; (680 <Reset_Handler+0x78>)
 61c:	3303      	adds	r3, #3
 61e:	1a9b      	subs	r3, r3, r2
 620:	089b      	lsrs	r3, r3, #2
 622:	3301      	adds	r3, #1
 624:	009b      	lsls	r3, r3, #2
 626:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 628:	4813      	ldr	r0, [pc, #76]	; (678 <Reset_Handler+0x70>)
 62a:	4912      	ldr	r1, [pc, #72]	; (674 <Reset_Handler+0x6c>)
 62c:	588c      	ldr	r4, [r1, r2]
 62e:	5084      	str	r4, [r0, r2]
 630:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 632:	429a      	cmp	r2, r3
 634:	d1fa      	bne.n	62c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
 636:	4a13      	ldr	r2, [pc, #76]	; (684 <Reset_Handler+0x7c>)
 638:	4b13      	ldr	r3, [pc, #76]	; (688 <Reset_Handler+0x80>)
 63a:	429a      	cmp	r2, r3
 63c:	d20a      	bcs.n	654 <Reset_Handler+0x4c>
 63e:	43d3      	mvns	r3, r2
 640:	4911      	ldr	r1, [pc, #68]	; (688 <Reset_Handler+0x80>)
 642:	185b      	adds	r3, r3, r1
 644:	2103      	movs	r1, #3
 646:	438b      	bics	r3, r1
 648:	3304      	adds	r3, #4
 64a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
 64c:	2100      	movs	r1, #0
 64e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
 650:	4293      	cmp	r3, r2
 652:	d1fc      	bne.n	64e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 654:	4a0d      	ldr	r2, [pc, #52]	; (68c <Reset_Handler+0x84>)
 656:	21ff      	movs	r1, #255	; 0xff
 658:	4b0d      	ldr	r3, [pc, #52]	; (690 <Reset_Handler+0x88>)
 65a:	438b      	bics	r3, r1
 65c:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
 65e:	4a0d      	ldr	r2, [pc, #52]	; (694 <Reset_Handler+0x8c>)
 660:	6853      	ldr	r3, [r2, #4]
 662:	397f      	subs	r1, #127	; 0x7f
 664:	430b      	orrs	r3, r1
 666:	6053      	str	r3, [r2, #4]
        __libc_init_array();
 668:	4b0b      	ldr	r3, [pc, #44]	; (698 <Reset_Handler+0x90>)
 66a:	4798      	blx	r3
        main();
 66c:	4b0b      	ldr	r3, [pc, #44]	; (69c <Reset_Handler+0x94>)
 66e:	4798      	blx	r3
 670:	e7fe      	b.n	670 <Reset_Handler+0x68>
 672:	46c0      	nop			; (mov r8, r8)
 674:	000008fc 	.word	0x000008fc
 678:	20000000 	.word	0x20000000
 67c:	20000004 	.word	0x20000004
 680:	20000004 	.word	0x20000004
 684:	20000004 	.word	0x20000004
 688:	20000044 	.word	0x20000044
 68c:	e000ed00 	.word	0xe000ed00
 690:	00000000 	.word	0x00000000
 694:	41004000 	.word	0x41004000
 698:	00000875 	.word	0x00000875
 69c:	00000835 	.word	0x00000835

000006a0 <SERCOM2_Handler>:
 *						- Overrides weak definition
 ******************************************************************************************************/
void SERCOM2_Handler(void)
{
	/* Check for Address match interrupt */
	if(SERCOM2->I2CS.INTFLAG.bit.AMATCH)
 6a0:	4b33      	ldr	r3, [pc, #204]	; (770 <SERCOM2_Handler+0xd0>)
 6a2:	7b9b      	ldrb	r3, [r3, #14]
 6a4:	079b      	lsls	r3, r3, #30
 6a6:	d504      	bpl.n	6b2 <SERCOM2_Handler+0x12>
	{
		/* clearing the Address match interrupt */
		SERCOM2->I2CS.INTFLAG.bit.AMATCH = 1;
 6a8:	4a31      	ldr	r2, [pc, #196]	; (770 <SERCOM2_Handler+0xd0>)
 6aa:	7b93      	ldrb	r3, [r2, #14]
 6ac:	2102      	movs	r1, #2
 6ae:	430b      	orrs	r3, r1
 6b0:	7393      	strb	r3, [r2, #14]
	}

	/* Data Ready interrupt check */
	//ToDo: Errata DS80000747B writing CTRLB in DRDY or AMATCH interrupts
	if(SERCOM2->I2CS.INTFLAG.bit.DRDY)
 6b2:	4b2f      	ldr	r3, [pc, #188]	; (770 <SERCOM2_Handler+0xd0>)
 6b4:	7b9b      	ldrb	r3, [r3, #14]
 6b6:	075b      	lsls	r3, r3, #29
 6b8:	d513      	bpl.n	6e2 <SERCOM2_Handler+0x42>
	{
		/* Checking for direction,
		DIR - 0 for slave read,
		DIR - 1 for slave write */
		if (SERCOM2->I2CS.STATUS.bit.DIR)
 6ba:	4b2d      	ldr	r3, [pc, #180]	; (770 <SERCOM2_Handler+0xd0>)
 6bc:	8a1b      	ldrh	r3, [r3, #16]
 6be:	071b      	lsls	r3, r3, #28
 6c0:	d534      	bpl.n	72c <SERCOM2_Handler+0x8c>
		{
			/* Slave write */
			/* Is this the last byte to write? */
			if (i == (BUF_SIZE-1))
 6c2:	4b2c      	ldr	r3, [pc, #176]	; (774 <SERCOM2_Handler+0xd4>)
 6c4:	781b      	ldrb	r3, [r3, #0]
 6c6:	2b02      	cmp	r3, #2
 6c8:	d021      	beq.n	70e <SERCOM2_Handler+0x6e>
				SERCOM2->I2CS.CTRLB.bit.CMD = 0x2;
				i = 0;
			}
			else
			{
				SERCOM2->I2CS.DATA.reg = rx_buf[i++];
 6ca:	1c59      	adds	r1, r3, #1
 6cc:	4a29      	ldr	r2, [pc, #164]	; (774 <SERCOM2_Handler+0xd4>)
 6ce:	7011      	strb	r1, [r2, #0]
 6d0:	4a29      	ldr	r2, [pc, #164]	; (778 <SERCOM2_Handler+0xd8>)
 6d2:	5cd2      	ldrb	r2, [r2, r3]
 6d4:	4b26      	ldr	r3, [pc, #152]	; (770 <SERCOM2_Handler+0xd0>)
 6d6:	761a      	strb	r2, [r3, #24]
				
				/* Execute a byte read operation followed by ACK/NACK reception by master*/
				SERCOM2->I2CS.CTRLB.bit.CMD = 0x3;
 6d8:	6859      	ldr	r1, [r3, #4]
 6da:	22c0      	movs	r2, #192	; 0xc0
 6dc:	0292      	lsls	r2, r2, #10
 6de:	430a      	orrs	r2, r1
 6e0:	605a      	str	r2, [r3, #4]
				/* Execute acknowledge action succeeded by reception of next byte to master*/
				SERCOM2->I2CS.CTRLB.bit.CMD = 0x3;
			}
		}
	}
	if (SERCOM2->I2CS.INTFLAG.bit.PREC)
 6e2:	4b23      	ldr	r3, [pc, #140]	; (770 <SERCOM2_Handler+0xd0>)
 6e4:	7b9b      	ldrb	r3, [r3, #14]
 6e6:	07db      	lsls	r3, r3, #31
 6e8:	d510      	bpl.n	70c <SERCOM2_Handler+0x6c>
	{
		SERCOM2->I2CS.INTFLAG.bit.PREC = 1;
 6ea:	4b21      	ldr	r3, [pc, #132]	; (770 <SERCOM2_Handler+0xd0>)
 6ec:	7b9a      	ldrb	r2, [r3, #14]
 6ee:	2101      	movs	r1, #1
 6f0:	430a      	orrs	r2, r1
 6f2:	739a      	strb	r2, [r3, #14]

		if (!SERCOM2->I2CS.STATUS.bit.DIR)
 6f4:	8a1b      	ldrh	r3, [r3, #16]
 6f6:	071b      	lsls	r3, r3, #28
 6f8:	d405      	bmi.n	706 <SERCOM2_Handler+0x66>
		{
			rx_buf[i++] = SERCOM2->I2CS.DATA.reg;
 6fa:	4b1d      	ldr	r3, [pc, #116]	; (770 <SERCOM2_Handler+0xd0>)
 6fc:	7e19      	ldrb	r1, [r3, #24]
 6fe:	4b1d      	ldr	r3, [pc, #116]	; (774 <SERCOM2_Handler+0xd4>)
 700:	781b      	ldrb	r3, [r3, #0]
 702:	4a1d      	ldr	r2, [pc, #116]	; (778 <SERCOM2_Handler+0xd8>)
 704:	54d1      	strb	r1, [r2, r3]
		}

		i = 0;
 706:	2200      	movs	r2, #0
 708:	4b1a      	ldr	r3, [pc, #104]	; (774 <SERCOM2_Handler+0xd4>)
 70a:	701a      	strb	r2, [r3, #0]
	}
}
 70c:	4770      	bx	lr
				SERCOM2->I2CS.DATA.reg = rx_buf[i++];
 70e:	4b1a      	ldr	r3, [pc, #104]	; (778 <SERCOM2_Handler+0xd8>)
 710:	789a      	ldrb	r2, [r3, #2]
 712:	4b17      	ldr	r3, [pc, #92]	; (770 <SERCOM2_Handler+0xd0>)
 714:	761a      	strb	r2, [r3, #24]
				SERCOM2->I2CS.CTRLB.bit.CMD = 0x2;
 716:	685a      	ldr	r2, [r3, #4]
 718:	4918      	ldr	r1, [pc, #96]	; (77c <SERCOM2_Handler+0xdc>)
 71a:	4011      	ands	r1, r2
 71c:	2280      	movs	r2, #128	; 0x80
 71e:	0292      	lsls	r2, r2, #10
 720:	430a      	orrs	r2, r1
 722:	605a      	str	r2, [r3, #4]
				i = 0;
 724:	2200      	movs	r2, #0
 726:	4b13      	ldr	r3, [pc, #76]	; (774 <SERCOM2_Handler+0xd4>)
 728:	701a      	strb	r2, [r3, #0]
 72a:	e7da      	b.n	6e2 <SERCOM2_Handler+0x42>
			if (i == (BUF_SIZE-1))
 72c:	4b11      	ldr	r3, [pc, #68]	; (774 <SERCOM2_Handler+0xd4>)
 72e:	781a      	ldrb	r2, [r3, #0]
 730:	2a02      	cmp	r2, #2
 732:	d010      	beq.n	756 <SERCOM2_Handler+0xb6>
				rx_buf[i++] = SERCOM2->I2CS.DATA.reg;
 734:	1c51      	adds	r1, r2, #1
 736:	4b0f      	ldr	r3, [pc, #60]	; (774 <SERCOM2_Handler+0xd4>)
 738:	7019      	strb	r1, [r3, #0]
 73a:	4b0d      	ldr	r3, [pc, #52]	; (770 <SERCOM2_Handler+0xd0>)
 73c:	7e18      	ldrb	r0, [r3, #24]
 73e:	490e      	ldr	r1, [pc, #56]	; (778 <SERCOM2_Handler+0xd8>)
 740:	5488      	strb	r0, [r1, r2]
				SERCOM2->I2CS.CTRLB.bit.ACKACT = 0;
 742:	685a      	ldr	r2, [r3, #4]
 744:	490e      	ldr	r1, [pc, #56]	; (780 <SERCOM2_Handler+0xe0>)
 746:	400a      	ands	r2, r1
 748:	605a      	str	r2, [r3, #4]
				SERCOM2->I2CS.CTRLB.bit.CMD = 0x3;
 74a:	6859      	ldr	r1, [r3, #4]
 74c:	22c0      	movs	r2, #192	; 0xc0
 74e:	0292      	lsls	r2, r2, #10
 750:	430a      	orrs	r2, r1
 752:	605a      	str	r2, [r3, #4]
 754:	e7c5      	b.n	6e2 <SERCOM2_Handler+0x42>
				SERCOM2->I2CS.CTRLB.bit.ACKACT = 0;
 756:	4b06      	ldr	r3, [pc, #24]	; (770 <SERCOM2_Handler+0xd0>)
 758:	685a      	ldr	r2, [r3, #4]
 75a:	4909      	ldr	r1, [pc, #36]	; (780 <SERCOM2_Handler+0xe0>)
 75c:	400a      	ands	r2, r1
 75e:	605a      	str	r2, [r3, #4]
				SERCOM2->I2CS.CTRLB.bit.CMD = 0x2;
 760:	685a      	ldr	r2, [r3, #4]
 762:	4906      	ldr	r1, [pc, #24]	; (77c <SERCOM2_Handler+0xdc>)
 764:	4011      	ands	r1, r2
 766:	2280      	movs	r2, #128	; 0x80
 768:	0292      	lsls	r2, r2, #10
 76a:	430a      	orrs	r2, r1
 76c:	605a      	str	r2, [r3, #4]
 76e:	e7b8      	b.n	6e2 <SERCOM2_Handler+0x42>
 770:	42001000 	.word	0x42001000
 774:	2000003c 	.word	0x2000003c
 778:	20000040 	.word	0x20000040
 77c:	fffcffff 	.word	0xfffcffff
 780:	fffbffff 	.word	0xfffbffff

00000784 <i2c_clock_init>:
 * @return				- void
 *
 * @note				- 
 ******************************************************************************************************/
void i2c_clock_init()
{
 784:	b500      	push	{lr}
 786:	b083      	sub	sp, #12
			PM->APBCMASK.reg |= mask;
 788:	4a07      	ldr	r2, [pc, #28]	; (7a8 <i2c_clock_init+0x24>)
 78a:	6a13      	ldr	r3, [r2, #32]
 78c:	2110      	movs	r1, #16
 78e:	430b      	orrs	r3, r1
 790:	6213      	str	r3, [r2, #32]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
 792:	a901      	add	r1, sp, #4
 794:	2300      	movs	r3, #0
 796:	700b      	strb	r3, [r1, #0]
	uint32_t gclk_index = SERCOM2_GCLK_ID_CORE;

	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_SERCOM2);	//Turn on module in Power Manager - peripheral bus C
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);					//Turn on generic clock for i2c: Default is generator0

	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);				//Write defaults to SERCOM2
 798:	200f      	movs	r0, #15
 79a:	4b04      	ldr	r3, [pc, #16]	; (7ac <i2c_clock_init+0x28>)
 79c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);									//Enable
 79e:	200f      	movs	r0, #15
 7a0:	4b03      	ldr	r3, [pc, #12]	; (7b0 <i2c_clock_init+0x2c>)
 7a2:	4798      	blx	r3
}
 7a4:	b003      	add	sp, #12
 7a6:	bd00      	pop	{pc}
 7a8:	40000400 	.word	0x40000400
 7ac:	000004e1 	.word	0x000004e1
 7b0:	00000455 	.word	0x00000455

000007b4 <i2c_pin_init>:
 * @return				- void
 *
 * @note				- PA08 = SDA, PA09 = SCL
 ******************************************************************************************************/
void i2c_pin_init()
{
 7b4:	b510      	push	{r4, lr}
	PORT->Group[port].PINCFG[((pinmux >> 16) - (port*32))].bit.PMUXEN = 1;
 7b6:	4b0e      	ldr	r3, [pc, #56]	; (7f0 <i2c_pin_init+0x3c>)
 7b8:	2148      	movs	r1, #72	; 0x48
 7ba:	5c5a      	ldrb	r2, [r3, r1]
 7bc:	2401      	movs	r4, #1
 7be:	4322      	orrs	r2, r4
 7c0:	545a      	strb	r2, [r3, r1]
	PORT->Group[port].PMUX[((pinmux >> 16) - (port*32))/2].reg &= ~(0xF << (4 * ((pinmux >> 16) & 0x01u)));
 7c2:	2234      	movs	r2, #52	; 0x34
 7c4:	5c98      	ldrb	r0, [r3, r2]
 7c6:	3939      	subs	r1, #57	; 0x39
 7c8:	4388      	bics	r0, r1
 7ca:	5498      	strb	r0, [r3, r2]
	PORT->Group[port].PMUX[((pinmux >> 16) - (port*32))/2].reg |= (uint8_t)((pinmux &0x0000FFFF) << (4 * ((pinmux >> 16) & 0x01u)));
 7cc:	5c98      	ldrb	r0, [r3, r2]
 7ce:	390c      	subs	r1, #12
 7d0:	4308      	orrs	r0, r1
 7d2:	5498      	strb	r0, [r3, r2]
	PORT->Group[port].PINCFG[((pinmux >> 16) - (port*32))].bit.PMUXEN = 1;
 7d4:	2049      	movs	r0, #73	; 0x49
 7d6:	5c19      	ldrb	r1, [r3, r0]
 7d8:	4321      	orrs	r1, r4
 7da:	5419      	strb	r1, [r3, r0]
	PORT->Group[port].PMUX[((pinmux >> 16) - (port*32))/2].reg &= ~(0xF << (4 * ((pinmux >> 16) & 0x01u)));
 7dc:	5c99      	ldrb	r1, [r3, r2]
 7de:	383a      	subs	r0, #58	; 0x3a
 7e0:	4001      	ands	r1, r0
 7e2:	5499      	strb	r1, [r3, r2]
	PORT->Group[port].PMUX[((pinmux >> 16) - (port*32))/2].reg |= (uint8_t)((pinmux &0x0000FFFF) << (4 * ((pinmux >> 16) & 0x01u)));
 7e4:	5c99      	ldrb	r1, [r3, r2]
 7e6:	3021      	adds	r0, #33	; 0x21
 7e8:	4301      	orrs	r1, r0
 7ea:	5499      	strb	r1, [r3, r2]
	pin_set_peripheral_function(PINMUX_PA08D_SERCOM2_PAD0);	
	pin_set_peripheral_function(PINMUX_PA09D_SERCOM2_PAD1);
}
 7ec:	bd10      	pop	{r4, pc}
 7ee:	46c0      	nop			; (mov r8, r8)
 7f0:	41004400 	.word	0x41004400

000007f4 <i2c_slave_init>:
 *						
 ******************************************************************************************************/
void i2c_slave_init()
{
	/* Configurations while I2C is DISABLED: */
	SERCOM2->I2CS.CTRLA.reg &= ~SERCOM_I2CS_CTRLA_ENABLE;
 7f4:	4b0c      	ldr	r3, [pc, #48]	; (828 <i2c_slave_init+0x34>)
 7f6:	6819      	ldr	r1, [r3, #0]
 7f8:	2002      	movs	r0, #2
 7fa:	4381      	bics	r1, r0
 7fc:	6019      	str	r1, [r3, #0]
	* SPEED does not exist in the SAMD20
	*	- SDAHOLD bit field as 0x02, SDA hold time is configured for 300-600ns
	*	- RUNSTDBY bit as 0x01, Generic clock is enabled in all sleep modes (any interrupt can wake up the device)
	*	- MODE bitfield to 0x4, SERCOM2 is configured as I2C Slave */

		SERCOM2->I2CS.CTRLA.reg =	SERCOM_I2CS_CTRLA_SDAHOLD(0x2)	|
 7fe:	4a0b      	ldr	r2, [pc, #44]	; (82c <i2c_slave_init+0x38>)
 800:	601a      	str	r2, [r3, #0]
									SERCOM_I2CS_CTRLA_MODE_I2C_SLAVE;
	
		
		
	/* Enable Smart Mode - Will ACK when DATA.DATA is read*/
	SERCOM2->I2CS.CTRLB.reg = SERCOM_I2CS_CTRLB_SMEN;
 802:	2280      	movs	r2, #128	; 0x80
 804:	0052      	lsls	r2, r2, #1
 806:	605a      	str	r2, [r3, #4]

	/* Configure Address match configuration? (Datasheet) */
	//this cleared ACKACT and SMEN???
	SERCOM2->I2CS.CTRLB.reg = SERCOM_I2CS_CTRLB_AMODE(0x0);		//Respond to Address in addressmask
 808:	2200      	movs	r2, #0
 80a:	605a      	str	r2, [r3, #4]

	/* Write the slave address into ADDR register */
	SERCOM2->I2CS.ADDR.reg = (SLAVE_ADDR << 1) ;
 80c:	3224      	adds	r2, #36	; 0x24
 80e:	615a      	str	r2, [r3, #20]
	/* Write the slave address into ADDR MASK register (datasheet?) */
	//SERCOM2->I2CS.ADDR.reg = SLAVE_ADDR << 17 ;


	/* Address match interrupt; Data ready interrupt; stop received interrupts are enabled */
	SERCOM2->I2CS.INTENSET.reg = SERCOM_I2CS_INTENSET_PREC | SERCOM_I2CS_INTENSET_AMATCH | SERCOM_I2CS_INTENSET_DRDY;
 810:	3a1d      	subs	r2, #29
 812:	735a      	strb	r2, [r3, #13]

	/* SERCOM2 peripheral enabled by setting the ENABLE bit as 1*/
	SERCOM2->I2CS.CTRLA.reg |= SERCOM_I2CS_CTRLA_ENABLE;
 814:	681a      	ldr	r2, [r3, #0]
 816:	4302      	orrs	r2, r0
 818:	601a      	str	r2, [r3, #0]

	/* SERCOM enable synchronization busy */
	while(SERCOM2->I2CS.STATUS.bit.SYNCBUSY & SERCOM_I2CM_STATUS_SYNCBUSY);	//Todo: TEST
 81a:	8a1b      	ldrh	r3, [r3, #16]
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
 81c:	2280      	movs	r2, #128	; 0x80
 81e:	0092      	lsls	r2, r2, #2
 820:	4b03      	ldr	r3, [pc, #12]	; (830 <i2c_slave_init+0x3c>)
 822:	601a      	str	r2, [r3, #0]

	/* SERCOM2 handler enabled */
	system_interrupt_enable(SERCOM2_IRQn);

}
 824:	4770      	bx	lr
 826:	46c0      	nop			; (mov r8, r8)
 828:	42001000 	.word	0x42001000
 82c:	00200090 	.word	0x00200090
 830:	e000e100 	.word	0xe000e100

00000834 <main>:
 * @return				- void
 *
 * @note				- 
 ******************************************************************************************************/
int main (void)
{
 834:	b510      	push	{r4, lr}
	system_init();
 836:	4b0a      	ldr	r3, [pc, #40]	; (860 <main+0x2c>)
 838:	4798      	blx	r3
	i2c_clock_init();
 83a:	4b0a      	ldr	r3, [pc, #40]	; (864 <main+0x30>)
 83c:	4798      	blx	r3
	i2c_pin_init();
 83e:	4b0a      	ldr	r3, [pc, #40]	; (868 <main+0x34>)
 840:	4798      	blx	r3
	i2c_slave_init();
 842:	4b0a      	ldr	r3, [pc, #40]	; (86c <main+0x38>)
 844:	4798      	blx	r3
	return (port_base->IN.reg & pin_mask);
 846:	4b0a      	ldr	r3, [pc, #40]	; (870 <main+0x3c>)
 848:	2080      	movs	r0, #128	; 0x80
 84a:	0200      	lsls	r0, r0, #8
		port_base->OUTSET.reg = pin_mask;
 84c:	2180      	movs	r1, #128	; 0x80
 84e:	01c9      	lsls	r1, r1, #7
 850:	e000      	b.n	854 <main+0x20>
 852:	6199      	str	r1, [r3, #24]
	return (port_base->IN.reg & pin_mask);
 854:	6a1a      	ldr	r2, [r3, #32]

	/* This skeleton code simply sets the LED to the state of the button. */
	while (1) {
		/* Is button pressed? */
		if (port_pin_get_input_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) {
 856:	4202      	tst	r2, r0
 858:	d1fb      	bne.n	852 <main+0x1e>
	} else {
		port_base->OUTCLR.reg = pin_mask;
 85a:	6159      	str	r1, [r3, #20]
 85c:	e7fa      	b.n	854 <main+0x20>
 85e:	46c0      	nop			; (mov r8, r8)
 860:	000005d9 	.word	0x000005d9
 864:	00000785 	.word	0x00000785
 868:	000007b5 	.word	0x000007b5
 86c:	000007f5 	.word	0x000007f5
 870:	41004400 	.word	0x41004400

00000874 <__libc_init_array>:
 874:	b570      	push	{r4, r5, r6, lr}
 876:	2600      	movs	r6, #0
 878:	4d0c      	ldr	r5, [pc, #48]	; (8ac <__libc_init_array+0x38>)
 87a:	4c0d      	ldr	r4, [pc, #52]	; (8b0 <__libc_init_array+0x3c>)
 87c:	1b64      	subs	r4, r4, r5
 87e:	10a4      	asrs	r4, r4, #2
 880:	42a6      	cmp	r6, r4
 882:	d109      	bne.n	898 <__libc_init_array+0x24>
 884:	2600      	movs	r6, #0
 886:	f000 f829 	bl	8dc <_init>
 88a:	4d0a      	ldr	r5, [pc, #40]	; (8b4 <__libc_init_array+0x40>)
 88c:	4c0a      	ldr	r4, [pc, #40]	; (8b8 <__libc_init_array+0x44>)
 88e:	1b64      	subs	r4, r4, r5
 890:	10a4      	asrs	r4, r4, #2
 892:	42a6      	cmp	r6, r4
 894:	d105      	bne.n	8a2 <__libc_init_array+0x2e>
 896:	bd70      	pop	{r4, r5, r6, pc}
 898:	00b3      	lsls	r3, r6, #2
 89a:	58eb      	ldr	r3, [r5, r3]
 89c:	4798      	blx	r3
 89e:	3601      	adds	r6, #1
 8a0:	e7ee      	b.n	880 <__libc_init_array+0xc>
 8a2:	00b3      	lsls	r3, r6, #2
 8a4:	58eb      	ldr	r3, [r5, r3]
 8a6:	4798      	blx	r3
 8a8:	3601      	adds	r6, #1
 8aa:	e7f2      	b.n	892 <__libc_init_array+0x1e>
 8ac:	000008e8 	.word	0x000008e8
 8b0:	000008e8 	.word	0x000008e8
 8b4:	000008e8 	.word	0x000008e8
 8b8:	000008ec 	.word	0x000008ec
 8bc:	00000238 	.word	0x00000238
 8c0:	00000218 	.word	0x00000218
 8c4:	00000218 	.word	0x00000218
 8c8:	00000288 	.word	0x00000288
 8cc:	0000022a 	.word	0x0000022a
 8d0:	00000246 	.word	0x00000246
 8d4:	0000021c 	.word	0x0000021c
 8d8:	00000254 	.word	0x00000254

000008dc <_init>:
 8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8de:	46c0      	nop			; (mov r8, r8)
 8e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8e2:	bc08      	pop	{r3}
 8e4:	469e      	mov	lr, r3
 8e6:	4770      	bx	lr

000008e8 <__init_array_start>:
 8e8:	000000cd 	.word	0x000000cd

000008ec <_fini>:
 8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8ee:	46c0      	nop			; (mov r8, r8)
 8f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8f2:	bc08      	pop	{r3}
 8f4:	469e      	mov	lr, r3
 8f6:	4770      	bx	lr

000008f8 <__fini_array_start>:
 8f8:	000000a5 	.word	0x000000a5
